-- TYDZIEŃ 3

CREATE TABLE building (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE floor (
    id SERIAL PRIMARY KEY,
    number VARCHAR(50) NOT NULL,
    building_id INT,
    CONSTRAINT fk_building FOREIGN KEY (building_id) REFERENCES building(id)
);

CREATE TABLE room_category (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE room (
    id SERIAL PRIMARY KEY,
    number VARCHAR(50) NOT NULL,
    room_category_id INT NOT NULL,
    floor_id INT,
    CONSTRAINT fk_room_category FOREIGN KEY (room_category_id) REFERENCES room_category(id),
    CONSTRAINT fk_floor FOREIGN KEY (floor_id) REFERENCES floor(id)
);

CREATE TABLE projector (
    id SERIAL PRIMARY KEY,
    serial_number VARCHAR(100) NOT NULL
);

CREATE TABLE room_projector (
    id SERIAL PRIMARY KEY,
    room_id INT,
    projector_id INT,
    CONSTRAINT fk_room FOREIGN KEY (room_id) REFERENCES room(id),
    CONSTRAINT fk_projector FOREIGN KEY (projector_id) REFERENCES projector(id)
);

CREATE TABLE person_type (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);

CREATE TABLE person (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    person_type_id INT NOT NULL,
    CONSTRAINT fk_person_type FOREIGN KEY (person_type_id) REFERENCES person_type(id)
);

CREATE EXTENSION IF NOT EXISTS postgis;

ALTER TABLE person
ADD COLUMN position geometry(Point, 2180);

CREATE TABLE keys (
    id SERIAL PRIMARY KEY,
    collection_date DATE,
    person_id INT,
    room_id INT NOT NULL,
    CONSTRAINT fk_person FOREIGN KEY (person_id) REFERENCES person(id),
    CONSTRAINT fk_room FOREIGN KEY (room_id) REFERENCES room(id)
);


-- TYDZIEŃ 4

CREATE INDEX idx_building_id ON floor(building_id);
CREATE INDEX idx_room_category_id ON room(room_category_id);
CREATE INDEX idx_floor_id ON room(floor_id);
CREATE INDEX idx_room_id ON room_projector(room_id);
CREATE INDEX idx_projector_id ON room_projector(projector_id);
CREATE INDEX idx_person_type_id ON person(person_type_id);
CREATE INDEX idx_person_id ON keys(person_id);
CREATE INDEX idx_room_id_keys ON keys(room_id);

INSERT INTO building (name) VALUES
('Building A'),
('Building B'),
('Building C'),
('Building D'),
('Building E');

INSERT INTO floor (number, building_id) VALUES
('1', 1),
('2', 1),
('1', 2),
('3', 3),
('2', 4);

INSERT INTO room_category (name) VALUES
('Sala wykładowa'),
('Laboratorium'),
('Pomieszczenie techniczne'),
('Aula');

INSERT INTO room (number, room_category_id, floor_id) VALUES
('101', 1, 1),
('102', 2, 2),
('201', 3, 3),
('301', 4, 4),
('401', 1, 5);

INSERT INTO projector (serial_number) VALUES
('SN12345'),
('SN12346'),
('SN12347'),
('SN12348'),
('SN12349');

INSERT INTO room_projector (room_id, projector_id) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5);

INSERT INTO person_type (name) VALUES
('Student'),
('Pracownik');

INSERT INTO person (first_name, last_name, person_type_id) VALUES
('Jan', 'Kowalski', 1),
('Anna', 'Nowak', 2),
('Piotr', 'Wójcik', 1),
('Katarzyna', 'Lewandowska', 2),
('Marek', 'Zieliński', 1);

INSERT INTO keys (collection_date, person_id, room_id) VALUES
('2025-03-10', 1, 1),
('2025-03-11', 2, 2),
('2025-03-12', 3, 3),
('2025-03-13', 4, 4),
('2025-03-14', 5, 5);

-- Dodaj kolumnę capacity (pojemność) do tabeli room.
ALTER TABLE room ADD COLUMN capacity INT;

-- Zmień imię osoby o ID=1 na John.
UPDATE person SET first_name = 'John' WHERE id = 1;

-- Usuń informacje o kluczu z ID=5.
DELETE FROM keys WHERE id = 5;

-- Ustaw wartość domyślną dla kolumny person_type_id.
ALTER TABLE person ALTER COLUMN person_type_id SET DEFAULT 1;

-- Zmodyfikuj tabelę person_type w taki sposób, aby dane w kolumnie name nie mogły się powtarzać.
ALTER TABLE person_type ADD CONSTRAINT name_unique UNIQUE(name);
-- Usunięcie tego ograniczenia:
-- ALTER TABLE person_type DROP CONSTRAINT name_unique;

-- Zmień nazwę tabeli projector na presentation_projector.
ALTER TABLE projector RENAME TO presentation_projector;

-- Usuń tabelę presentation_projector
-- DROP TABLE presentation_projector;

-- Dane zapisane w tabelach bazy danych można pobierać za pomocą instrukcji SELECT. 
-- Jej podstawowa postać ma schemat:
-- SELECT kolumna1, kolumna2, ..., kolumnaN
-- FROM tabela
-- [WHERE warunek]
-- [ORDER BY kolumna1, kolumna2, ..., kolumnaN [ASC | DEC]]

-- Użyj instrukcji SELECT do wyświetlenia zawartości tabeli building.
SELECT * FROM building;

-- Pobierz z tabeli person dane o imionach i nazwiskach.
SELECT first_name, last_name FROM person;

-- Pobierz z tabeli person dane o imionach i nazwiskach, tak aby nazwy kolumn były po polsku.
SELECT first_name AS imię, last_name AS nazwisko FROM person;

-- Wyświetl zawartość tabeli person posortowaną względem kolumny nazwisko w porządku rosnącym.
SELECT *
FROM person
ORDER BY last_name;

-- Wyświetl zawartość tabeli person posortowaną względem kolumny nazwisko w porządku malejącym.
SELECT *
FROM person
ORDER BY last_name DESC;

-- Wyświetl dane studentów.
-- Sposób 1 (gorszy)
SELECT * 
FROM person
WHERE person_type_id = 1;
-- Sposób 2 (lepszy)
SELECT * 
FROM person
WHERE person_type_id = (SELECT id FROM person_type WHERE name = 'Student');

-- Pobierz identyfikatory kluczy pobranych w dniu 11.03.2025.
SELECT id 
FROM keys
WHERE collection_date = '2025-03-11';

-- Pobierz identyfikatory kluczy pobranych przed 11.03.2025.
SELECT id 
FROM keys
WHERE collection_date < '2025-03-11';

-- Pobierz identyfikatory kluczy pobranych po 11.03.2025.
SELECT id 
FROM keys
WHERE collection_date > '2025-03-11';

-- Pobierz identyfikatory kluczy pobranych między 11.03.2025 a 13.03.2025.
-- Sposób 1
SELECT id
FROM keys
WHERE collection_date >= '2025-03-11' AND collection_date <= '2025-03-13';
-- Sposób 2
SELECT id
FROM keys
WHERE collection_date BETWEEN '2025-03-11' AND '2025-03-13';

-- Pobierz identyfikatory kluczy pobranych w dniu innym niż 13.03.2025.
SELECT id
FROM keys
WHERE collection_date <> '2025-03-13';

-- Pobierz daty pobrania kluczy o identyfikatorach: 1, 3 i 5.
-- Sposób 1
SELECT collection_date
FROM keys
WHERE id = 1 OR id = 3 OR id = 5;
-- Sposób 2
SELECT collection_date
FROM keys
WHERE id IN (1, 3, 5);

-- Wyświetl dane wszystkich projektorów, których numery seryjne zaczynają się od ciągu SN123.
SELECT * 
FROM presentation_projector
WHERE serial_number LIKE 'SN123%';

-- Napisz zapytanie, które pobierze z tabeli person listę nazwisk.
-- W wynikach nie mogą się pojawić duplikaty danych.
SELECT DISTINCT last_name FROM person;

-- Zmień typ DATE na TIMESTAMP w tabeli keys:
ALTER TABLE keys
ALTER COLUMN collection_date 
SET DATA TYPE TIMESTAMP 
USING collection_date::TIMESTAMP;--konwersja istniejących danych

INSERT INTO keys (collection_date, person_id, room_id) 
VALUES('2025-03-14 18:05:00', 4, 4);
-- Dodatkowo zmodyfikować rekordy 4 i 5 w keys tak, aby dalsze testy miały sens.

-- Wykonaj zapytanie, które wyświetli dane (imię i nazwisko)
-- pracowników, którzy pobrali klucze do sali 301 w dniu 14.03.
-- Zieliński i Lewandowska
-- Sposób 1
SELECT DISTINCT first_name, last_name
FROM person, keys, room
WHERE keys.person_id = person.id
  AND keys.room_id = room.id
  AND collection_date::DATE = '2025-03-14'
  AND number = '301';
-- Sposób 2
SELECT DISTINCT first_name, last_name
FROM person
  JOIN keys ON keys.person_id = person.id 
  JOIN room ON keys.room_id = room.id
  WHERE collection_date::DATE = '2025-03-14' AND number = '301';
-- Sposób 3
SELECT first_name, last_name 
FROM person
WHERE id IN (
  SELECT person_id
  FROM keys
  WHERE collection_date::DATE = '2025-03-14'
    AND room_id = (SELECT id FROM room WHERE number = '301')
);


-- TYDZIEŃ 5

-- Wyświetl liczbę pobrań kluczy
SELECT COUNT(*) FROM keys;

-- Wyświetl listę o postaci: ID osoby, imię, nazwisko, liczba pobrań kluczy przez tą osobę.
SELECT p.id, first_name, last_name, COUNT(k.id) AS num_of_keys
FROM person AS p JOIN keys AS k ON p.id = k.person_id
GROUP BY p.id, first_name, last_name;

-- Zmodyfikuj poprzedni przykład tak, aby uwzględnić również osoby, które nie pobrały jeszcze żadnego klucza.
SELECT p.id, first_name, last_name, COUNT(k.id) AS num_of_keys
FROM person AS p LEFT JOIN keys AS k ON p.id = k.person_id
GROUP BY p.id, first_name, last_name;

-- Zmodyfikuj poprzedni przykład:
-- - sortowanie po liczbie pobrań kluczy (od największej)
-- - informacje o osobie w jednej kolumnie zamiast w 3
-- - uwzględnij tylko pracowników
SELECT first_name || ' ' || last_name || ' (' || 'ID=' || p.id || ')' AS employee, COUNT(k.id) AS num_of_keys
FROM person AS p LEFT JOIN keys AS k ON p.id = k.person_id
WHERE p.person_type_id = (SELECT id FROM person_type WHERE name = 'Pracownik')
GROUP BY employee
ORDER BY num_of_keys DESC;

-- Wyświetl liczbę pobranych kluczy
SELECT COUNT(DISTINCT room_id) FROM keys;

-- Wyświetl listę o postaci: "first_name last_name (ID=XXX)", liczba pobranych kluczy przez tą osobę.
-- - uwzględnij również osoby, które nie pobrały jeszcze żadnego klucza,
-- - sortowanie po liczbie pobrań kluczy (od największej),
-- - informacje o osobie w jednej kolumnie,
-- - uwzględnij tylko pracowników.
SELECT first_name || ' ' || last_name || ' (' || 'ID=' || p.id || ')' AS employee, 
       COUNT(DISTINCT k.room_id) AS num_of_keys
FROM person AS p LEFT JOIN keys AS k ON p.id = k.person_id
WHERE p.person_type_id = (SELECT id FROM person_type WHERE name = 'Pracownik')
GROUP BY employee
ORDER BY num_of_keys DESC;

ALTER TABLE building ADD COLUMN building_year INT NOT NULL DEFAULT 1700;

-- Wyświetl rok budowy najstarszego budynku.
SELECT MIN(building_year) FROM building;

-- Wyświetl nazwę najstarszego budynku.
SELECT name 
FROM building
WHERE building_year = (SELECT MIN(building_year) FROM building);

-- Wyświetl nazwę najmłodszego budynku.
SELECT name 
FROM building
WHERE building_year = (SELECT MAX(building_year) FROM building);


-- TYDZIEŃ 6

-- Zaliczenie projektów. Każdy z 19 studentów musi opisać, w jaki sposób zrealizowałby dany punkt:

1. Dodanie tabeli department (wydział/katedra)
Powiązana z użytkownikiem i budynkiem.

2. Rozszerzenie user o dane kontaktowe
email: String
phone_number: String
address: String

3. Logi wypożyczeń kluczy (key_log)
Historia, kto i kiedy pobierał oraz zwracał klucze.

4. Dodanie tabeli access_rights (prawa dostępu)
Określenie, czy użytkownik może wchodzić do danej sali.

Powiązanie użytkownika z kategorią pomieszczenia.

5. Powiązanie room z equipment (sprzęt w pomieszczeniu)
Możliwość przechowywania np. komputerów, tablic, projektorów.

Przykładowe atrybuty: name, type, serial_number.

6. Harmonogram rezerwacji sal (room_booking)
Pozwala użytkownikom rezerwować pomieszczenia.

Atrybuty: user_id, room_id, start_time, end_time.

7. Dodanie tabeli maintenance (konserwacja)
Rejestr napraw i przeglądów w budynkach oraz pomieszczeniach.

Atrybuty: date, description, room_id, status.

8. Monitorowanie użycia projektorów (projector_usage)
Historia użycia projektorów w salach.

Powiązana z user i room.

9. Rozszerzenie building o dodatkowe informacje
year_built: INT

total_floors: INT

building_manager: String

10. System zgłoszeń (issue_report)
Użytkownicy mogą zgłaszać problemy w budynku (np. awaria światła).

Powiązana z room i user.

11. Dodanie tabeli event (wydarzenia w budynku)
Rejestr wykładów, konferencji, spotkań.

Powiązanie z room, user, start_time, end_time.

12. Integracja z systemem kart dostępu (access_card)
Przechowywanie informacji o kartach wejściowych.

Powiązana z użytkownikiem i pomieszczeniem.

13. Powiązanie sal z rodzajem mebli (furniture)
Rejestr wyposażenia sal (stoły, krzesła, tablice).

14. Dodanie tabeli security_camera (monitoring)
Przechowywanie informacji o kamerach w budynku.

15. Integracja z systemem alarmowym (alarm_system)
Przechowywanie historii alarmów i testów systemu.

16. System oceniania sal (room_review)
Możliwość oceniania sal pod kątem warunków i wygody.

17. Rejestr administratorów budynku (building_admin)
Określenie, kto zarządza budynkiem.

18. Przechowywanie temperatury (room_temperature)
Historia temperatur w pomieszczeniach.

19. Zastosowanie IoT (iot_sensors)
Sensory monitorujące np. poziom CO2, wilgotność.


-- TYDZIEŃ 7

-- Łączenie łańcuchów znakowych
SELECT STRING_AGG(last_name, ', ') AS "Nazwiska" FROM person;

-- Wyświetl listę o postaci: piętro, liczba pomieszczeń. Uwzględnij tylko te piętra, które mają więcej niż jedno pomieszczenie.
SELECT f.number AS "Piętro", COUNT(*) AS "Liczba pomieszczeń"
FROM floor AS f JOIN room ON floor_id = f.id
GROUP BY f.number
HAVING COUNT(*) > 1
ORDER BY "Liczba pomieszczeń" DESC;

-- Zapytanie skorelowane
-- Wyświetl imiona i nazwiska użytkowników, którzy przynajmniej raz pobrali klucze do laboratorium.
SELECT first_name, last_name
FROM person AS p
WHERE EXISTS (
    SELECT 1
    FROM keys AS k
    JOIN room AS r ON k.room_id = r.id
    WHERE r.room_category_id = (SELECT id from room_category WHERE name = 'Laboratorium')
    AND k.person_id = p.id
);
-- 1 to po prostu stała wartość zwracana przez podzapytanie.
-- Klauzula EXISTS nie sprawdza, co dokładnie zwraca podzapytanie – interesuje ją tylko to, czy zwróci jakikolwiek wynik. 
-- Można by równie dobrze napisać SELECT 'X' albo SELECT NULL, ale konwencjonalnie używa się SELECT 1, bo jest proste i wydajne.

-- Transakcje
START TRANSACTION;
UPDATE building SET name = 'Gmach Główny PW' WHERE name = 'Building A';
UPDATE building SET name = 'Wydział Matematyki PW' WHERE name = 'Building B';
COMMIT;

-- Wycofanie transakcji - ROLLBACK zamiast COMMIT

-- Zaprezentować możliwości GPT w kontekście generowania schematu bazy na podstawie zdjęcia diagramu klas